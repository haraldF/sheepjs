{"version":3,"sources":["src/card.ts","src/deck.ts","src/gamerules.ts","src/hand.ts","src/gamestack.ts","src/game.ts","src/player.ts","src/aiplayer.ts","src/cardimages.ts","index.ts"],"names":[],"mappings":"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","file":"sheepjs.ae99773a.map","sourceRoot":"..","sourcesContent":["export enum Color {\n    Bells = 0,\n    Hearts = 1,\n    Leaves = 2,\n    Acorns = 3\n}\n\nexport enum Rank {\n    Seven = 0,\n    Eight = 1,\n    Nine = 2,\n    Jack = 3,\n    Queen = 4,\n    King = 5,\n    Ten = 6,\n    Ace = 7\n}\n\nexport class Card {\n    private static readonly pointValues = [ 0, 0, 0, 2, 3, 4, 10, 11 ];\n\n    constructor(public readonly color: Color, public readonly rank: Rank) {}\n\n    pointValue(): number {\n        return Card.pointValues[this.rank];\n    }\n\n    description(): string {\n        return `${Color[this.color]} ${Rank[this.rank]}`;\n    }\n\n    isEqual(other: Card): boolean {\n        return this.color === other.color && this.rank === other.rank;\n    }\n\n    hash(): number {\n        return this.color * 8 + this.rank;\n    }\n}\n","import { Card, Color, Rank } from \"./card\";\n\nexport class Deck {\n    readonly cards: Array<Card>;\n\n    constructor() {\n        this.cards = new Array<Card>();\n        for (let color = Color.Bells; color <= Color.Acorns; ++color) {\n            for (let rank = Rank.Seven; rank <= Rank.Ace; ++rank) {\n                this.cards.push(new Card(color, rank));\n            }\n        }\n    }\n\n    shuffle() {\n        Deck.shuffleArray(this.cards);\n    }\n\n    static shuffleArray<T>(arr: Array<T>) {\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n    }\n}","import { Card, Rank, Color } from \"./card\";\nimport { Player } from \"./player\";\nimport { Hand } from \"./hand\";\n\nexport enum GameType {\n    Solo = 0,\n    Wenz = 1,\n    Geier = 2,\n    Sau = 3\n}\n\nexport enum GameColor {\n    Bells = 0,\n    Hearts = 1,\n    Leaves = 2,\n    Acorns = 3,\n    ColorLess = 4\n}\n\nexport enum GameExtraFlags {\n    Normal = 0,\n    Tout = 1,\n    Sie = 2\n}\n\nexport class GameRules {\n\n    public readonly trumpColor: GameColor;\n\n    constructor(readonly gameType: GameType, readonly gameColor: GameColor, readonly gameExtraFlags: GameExtraFlags = GameExtraFlags.Normal) {\n        if (gameColor == GameColor.ColorLess && (gameType == GameType.Solo || gameType == GameType.Sau))\n            throw new Error(\"Invalid Game\");\n        if (gameType === GameType.Sau && gameColor === GameColor.Hearts)\n            throw new Error(\"Invalid Game\");\n        this.trumpColor = gameType === GameType.Sau ? GameColor.Hearts : gameColor;\n    }\n\n    isHigherCard(oldCard: Card, newCard: Card): boolean {\n        const oldTrumpValue = this.trumpValue(oldCard)\n        const newTrumpValue = this.trumpValue(newCard)\n\n        if (newTrumpValue > oldTrumpValue)\n            return true;\n        if (newTrumpValue < oldTrumpValue)\n            return false;\n\n        if (oldCard.color == newCard.color)\n            return newCard.rank > oldCard.rank;\n        return false;\n    }\n\n    trumpValue(card: Card): number {\n        if (card.rank === Rank.Queen && this.gameType !== GameType.Wenz)\n            return (card.color + 1) << 24;\n        if (card.rank === Rank.Jack && this.gameType !== GameType.Geier)\n            return (card.color + 1) << 16;\n        if (card.color as number === this.trumpColor)\n            return card.rank + 1;\n        return 0;\n    }\n\n    isTrump(card: Card): boolean {\n        return this.trumpValue(card) != 0\n    }\n\n    isGameAce(card: Card): boolean {\n        return card.color.valueOf() === this.gameColor.valueOf() && card.rank === Rank.Ace;\n    }\n\n    isCardAllowed(card: Card, hand: Hand, player: Player): boolean {\n        if (hand.cards.length === 0) {\n            if (this.gameType !== GameType.Sau)\n                return true; // all cards allowed\n            if (!this.playerHasGameAce(player))\n                return true;\n            // ### TODO - davonlaufen?\n            if (!this.isTrump(card) && this.gameColor.valueOf() === card.color.valueOf() && card.rank !== Rank.Ace)\n                return false;\n            return true;\n        }\n\n        const firstCard = hand.cards[0];\n\n        if (this.gameType === GameType.Sau && this.playerHasGameAce(player)) {\n            // first card is game color - player must play Ace\n            if (firstCard.color.valueOf() === this.gameColor.valueOf())\n                return this.isGameAce(card);\n            else if (this.isGameAce(card))\n                return false; // player must not play game ace\n        }\n\n        if (this.isTrump(firstCard)) {\n            if (this.isTrump(card))\n                return true;\n            return !this.playerHasTrump(player);\n        }\n\n        if (firstCard.color == card.color && !this.isTrump(card))\n            return true;\n        return !this.playerHasColor(player, firstCard.color)\n    }\n\n    playerHasTrump(player: Player): boolean {\n        return player.cards.find(card => card !== undefined && this.isTrump(card)) !== undefined;\n    }\n\n    playerHasColor(player: Player, color: Color): boolean {\n        return player.cards.find(card => card !== undefined && card.color === color && !this.isTrump(card)) !== undefined;\n    }\n\n    playerColorCount(player: Player, color: Color): number {\n        return player.cards.reduce((count, card): number => {\n            if (card !== undefined && card.color == color && !this.isTrump(card))\n                return count + 1;\n            return count;\n        }, 0);\n    }\n\n    playerHasGameAce(player: Player): boolean {\n        return player.cards.find(card => card !== undefined && this.isGameAce(card)) !== undefined;\n    }\n\n    cardSortRank(card: Card | undefined) {\n        if (card === undefined)\n            return -1;\n\n        const trumpValue = this.trumpValue(card);\n        if (trumpValue !== 0)\n            return trumpValue * 64;\n        return card.rank.valueOf() + (card.color.valueOf() * 8);\n    }\n\n    compare(card1: Card | undefined, card2: Card | undefined) {\n        return this.cardSortRank(card2) - this.cardSortRank(card1);\n    }\n}","import { Card } from \"./card\";\n\nexport class Hand {\n    readonly cards = new Array<Card>();\n    winner?: number = undefined;\n    winningCardIndex?: number = undefined\n\n    constructor(public readonly firstPlayerIndex: number) {}\n\n    currentPointValue(): number {\n        let sum = 0;\n        for (let card of this.cards) {\n            sum += card.pointValue();\n        }\n        return sum\n    }\n}","import { Hand } from \"./hand\";\n\nexport class GameStack {\n    currentHand: Hand;\n    readonly hands = new Array<Hand>();\n\n    constructor(firstPlayerIndex: number) {\n        this.currentHand = new Hand(firstPlayerIndex);\n    }\n\n    finalizeCurrentHand(firstPlayerIndex: number) {\n        if (this.currentHand.cards.length !== 4)\n            throw new Error(\"Unable to finalize hand\");\n\n        this.hands.push(this.currentHand)\n        this.currentHand = new Hand(firstPlayerIndex);\n    }\n\n    getPoints(): [number, number, number, number] {\n        const points: [number, number, number, number] = [ 0, 0, 0, 0 ];\n        for (let hand of this.hands)\n            points[hand.winner!] += hand.currentPointValue();\n        return points;\n    }\n\n    containsCardByPlayer(playerIndex: number): boolean {\n        const idx = Math.abs(this.currentHand.firstPlayerIndex - playerIndex) % 4;\n        return this.currentHand.cards[idx] !== undefined;\n    }\n}","import { Card, Color, Rank } from \"./card\";\nimport { Player, PlayerNumber } from \"./player\";\nimport { Deck } from \"./deck\";\nimport { Hand } from \"./hand\";\nimport { GameRules, GameColor, GameType, GameExtraFlags } from \"./gamerules\";\nimport { GameStack } from \"./gamestack\";\n\nexport type Players = [Player, Player, Player, Player];\n\nexport const enum Winner {\n    Players, Opponents\n}\n\nexport class Game {\n\n    private currentPlayer: Player;\n    private currentStack?: GameStack;\n    private deck?: Deck;\n    private firstPlayer: Player;\n    private gameRules?: GameRules;\n\n    private gamePlayers?: [ Player, Player | undefined ];\n    private gamePlayersWon? = false;\n\n    constructor(readonly players: Players) {\n        this.currentPlayer = this.firstPlayer = players[0];\n    }\n\n    currentGameRules(): GameRules | undefined { return this.gameRules; }\n    getCurrentPlayer(): Player { return this.currentPlayer; }\n    getCurrentHand(): Hand | undefined { return this.currentStack ? this.currentStack.currentHand : undefined; }\n    getPreviousHand(): Hand | undefined { return this.currentStack ? this.currentStack.hands[this.currentStack.hands.length - 1] : undefined; }\n\n    getWinner(): Winner | undefined {\n        if (this.gamePlayersWon === undefined)\n            return undefined;\n        return this.gamePlayersWon === true ? Winner.Players : Winner.Opponents;\n    }\n\n    start() {\n        this.currentStack = new GameStack(this.currentPlayer.position);\n        this.deck = new Deck();\n        this.deck.shuffle()\n\n        this.gameRules = undefined;\n        this.gamePlayers = undefined;\n        this.gamePlayersWon = undefined;\n\n        for (let player of this.players)\n            player.cards = new Array<Card>();\n\n        this.deck.cards.forEach((card, i) => {\n            this.players[i % 4].cards.push(card);\n        });\n    }\n\n    setGameType(gameType: GameType, gameColor: GameColor, player1: Player, gameExtraFlags: GameExtraFlags = GameExtraFlags.Normal) {\n        if (this.gameRules !== undefined)\n            throw new Error(\"Cannot change running game\");\n\n        const gameRules = new GameRules(gameType, gameColor, gameExtraFlags);\n\n        if (gameType === GameType.Sau) {\n            if (gameRules.playerHasGameAce(player1))\n                throw new Error(\"Player must not have game ace\");\n            if (!gameRules.playerHasColor(player1, gameColor.valueOf()))\n                throw new Error(\"Player must have at least one card in game color\");\n        }\n\n        this.gameRules = gameRules;\n\n        let player2 = undefined;\n        if (gameType === GameType.Sau) {\n            player2 = this.players.find(player => gameRules.playerHasGameAce(player));\n        }\n\n        this.gamePlayers = [ player1, player2 ];\n    }\n\n    playCard(cardIndex: number) {\n        if (this.gameRules === undefined)\n            throw new Error(\"No game in progress\")\n\n        const card = this.currentPlayer.cards[cardIndex];\n        if (card === undefined || !this.gameRules.isCardAllowed(card, this.currentStack!.currentHand, this.currentPlayer))\n            throw new Error(\"Invalid card\");\n\n        this.currentPlayer.cards[cardIndex] = undefined;\n        this.currentStack!.currentHand.cards.push(card);\n        this.nextTurn();\n    }\n\n    private nextTurn() {\n        this.updateCurrentWinner();\n\n        //if (this.gameRules!.gameExtraFlags === GameExtraFlags.Tout && )\n        // ### TODO\n\n        if (this.currentStack!.currentHand.cards.length === 4)\n            this.finalizeCurrentHand()\n        else\n            this.currentPlayer = this.players[Game.nextPlayerIndex(this.currentPlayer.position)];\n    }\n\n    playableCards() {\n        if (this.gameRules === undefined)\n            return [];\n        return this.currentPlayer.cards.map(card => {\n            if (card === undefined)\n                return card;\n            if (this.gameRules!.isCardAllowed(card, this.currentStack!.currentHand, this.currentPlayer))\n                return card;\n            return undefined;\n        });\n    }\n\n    private updateCurrentWinner() {\n        const currentHand = this.currentStack!.currentHand\n        if (currentHand.cards.length == 1) {\n            currentHand.winner = this.currentPlayer.position;\n            currentHand.winningCardIndex = 0;\n            return\n        }\n\n        const winningCard = currentHand.cards[currentHand.winningCardIndex!];\n        if (this.gameRules!.isHigherCard(winningCard, currentHand.cards[currentHand.cards.length - 1])) {\n            currentHand.winner = this.currentPlayer.position;\n            currentHand.winningCardIndex = currentHand.cards.length - 1;\n        }\n    }\n\n    static nextPlayerIndex(playerIdx: number): number {\n        return playerIdx === 3 ? 0 : playerIdx + 1;\n    }\n\n    static previousPlayerIndex(playerIdx: number): number {\n        return playerIdx === 0 ? 3 : playerIdx - 1;\n    }\n\n    private nextPlayer(player: Player): Player {\n        return this.players[Game.nextPlayerIndex(player.position)];\n    }\n\n    private finalizeCurrentHand() {\n        const winner = this.players[this.currentStack!.currentHand.winner!];\n        this.currentPlayer = winner;\n\n        this.currentStack!.finalizeCurrentHand(this.currentPlayer.position);\n\n        if (this.currentPlayer.cardsLeft() === 0) {\n            this.finalizeCurrentGame();\n        }\n    }\n\n    public gamePlayerPoints(): number {\n        const points = this.currentStack!.getPoints();\n\n        let team1Points = 0;\n\n        const player1Position = this.gamePlayers![0].position;\n        const player2Position = this.gamePlayers![1] === undefined ? -1 : this.gamePlayers![1]!.position;\n        points.forEach((point, i) => {\n            if (i === player1Position || i === player2Position)\n                team1Points += point;\n        });\n\n        return team1Points\n    }\n\n    private finalizeCurrentGame() {\n        // TODO - update credits\n        this.currentPlayer = this.nextPlayer(this.firstPlayer);\n        this.firstPlayer = this.currentPlayer;\n        this.gamePlayersWon = this.gamePlayerPoints() > 60;\n    }\n}","import { Card } from \"./card\";\n\nexport const enum PlayerNumber {\n    First = 0,\n    Second = 1,\n    Third = 2,\n    Fourth = 3\n}\n\nexport class Player {\n    public cards = new Array<Card | undefined>();\n\n    constructor(public position: PlayerNumber) {\n    }\n\n    public sortCards(customCompare: (a: Card | undefined, b: Card | undefined) => number) {\n        this.cards.sort(customCompare);\n    }\n\n    public cardsLeft(): number {\n        return this.cards.reduce(((sum, card) => sum += (card === undefined ? 0 : 1)), 0);\n    }\n}","import { PlayerNumber, Player } from \"./player\";\nimport { GameRules } from \"./gamerules\";\nimport { Hand } from \"./hand\";\n\nexport class AiPlayer extends Player {\n\n    constructor(position: PlayerNumber) {\n        super(position);\n    }\n\n    playCard(gameRules: GameRules, currentHand: Hand): number {\n\n        for (let i = 0; i < this.cards.length; ++i) {\n            const card = this.cards[i];\n            if (card !== undefined && gameRules.isCardAllowed(card, currentHand, this))\n                return i;\n        }\n\n        throw new Error(\"No playable card\");\n    }\n}","import { Card } from \"./card\";\n\nexport class CardImages {\n\n    constructor(public readonly path: string) {}\n\n    getImage(card: Card): string {\n        const colorNames = [\n            \"schelln\",\n            \"herz\",\n            \"gras\",\n            \"eichel\"\n        ];\n        const rankNames = [\n            \"7er\",\n            \"8er\",\n            \"9er\",\n            \"Unter\",\n            \"Ober\",\n            \"König\",\n            \"10er\",\n            \"Sau\"\n        ];\n\n        return `${this.path}/${colorNames[card.color]}${rankNames[card.rank]}.svg`;\n    }\n}","import { Players, Game, Winner } from \"./src/game\";\nimport { PlayerNumber, Player } from \"./src/player\";\nimport { AiPlayer } from \"./src/aiplayer\";\nimport { GameRules, GameType, GameColor } from \"./src/gamerules\";\nimport { Card } from \"./src/card\";\nimport { Hand } from \"./src/hand\";\nimport { CardImages } from \"./src/cardimages\";\n\nconst lang = (window && window.navigator.languages.includes(\"de\")) ? \"de\" : \"C\";\n\nconst players: Players = [\n    new Player(PlayerNumber.First),\n    new AiPlayer(PlayerNumber.Second),\n    new AiPlayer(PlayerNumber.Third),\n    new AiPlayer(PlayerNumber.Fourth)\n];\n\nconst game = new Game(players);\nconst cardImages = new CardImages(\"images\");\n\nconst heartSolo = new GameRules(GameType.Solo, GameColor.Hearts);\n\nconst gameTypeSelect = document.getElementById(\"gameType\") as HTMLSelectElement;\nconst gameColorSelect = document.getElementById(\"gameColor\") as HTMLSelectElement;\nconst logText = document.getElementById(\"log\") as HTMLTextAreaElement;\n\nconst de: { [index: string] : string } = {\n    \"Shuffle\": \"Mischen\",\n    \"Bells\": \"Schelln\",\n    \"Hearts\": \"Herz\",\n    \"Leaves\": \"Gras\",\n    \"Acorns\": \"Eichel\",\n    \"ColorLess\": \"Farblos\",\n    \"<none>\": \"<leer>\",\n    \"Seven\": \"Sieben\",\n    \"Eight\": \"Acht\",\n    \"Nine\": \"Neun\",\n    \"Ten\": \"Zehn\",\n    \"Jack\": \"Unter\",\n    \"Queen\": \"Ober\",\n    \"King\": \"König\",\n    \"Ace\": \"Ass\",\n    \"Play\": \"Spielen\",\n    \"Game\": \"Spiel\",\n    \"Cards\": \"Karten\",\n    \"Stacks\": \"Stiche\",\n    \"Current\": \"Aktueller\",\n    \"Previous\": \"Letzter\",\n    \"Hand\": \"Stich\"\n};\n\nfunction _(text: string): string {\n\n    if (text.includes(\" \"))\n        return text.split(\" \").map(item => _(item)).join(\" \");\n\n    if (lang === \"de\") {\n        const translation = de[text];\n        if (translation !== undefined)\n            return translation;\n    }\n    return text;\n}\n\nfunction log(text: string) {\n    logText.value += text + \"\\n\";\n}\n\nfunction shuffle() {\n    game.start();\n    players[0].sortCards(((c1, c2) => heartSolo.compare(c1, c2)));\n}\n\nfunction updateCards() {\n    const cards = players[0].cards;\n    for (let i = 0; i < 8; ++i) {\n        const tableData = document.getElementById(`player1_card${i}_label`) as HTMLDivElement;\n        const card = cards[i];\n\n        const cardImage = document.getElementById(`player1_card${i}_image`) as HTMLImageElement;\n        if (card !== undefined) {\n            cardImage.src = cardImages.getImage(card)\n        } else {\n            cardImage.src = \"\";\n        }\n\n        const cardLabel = card === undefined ? _(\"<none>\") : _(card.description());\n        tableData.innerText = cardLabel;\n    }\n\n    function updateStack(id: string, hand: Hand | undefined) {\n        let playerIndex = hand === undefined ? 0 : hand.firstPlayerIndex;\n        for (let i = 0; i < 4; ++i) {\n            const cardLabel = document.getElementById(`${id}_${i}_label`) as HTMLDivElement;\n            const cardImage = document.getElementById(`${id}_${i}_image`) as HTMLImageElement;\n            const card = hand === undefined ? undefined : hand.cards[i];\n            if (card !== undefined) {\n                cardImage.src = cardImages.getImage(card);\n                cardLabel.innerText = `P${playerIndex}: ${_(card.description())}`;\n            } else {\n                cardImage.src = \"\";\n                cardLabel.innerText = _(\"<none>\");\n            }\n            playerIndex = Game.nextPlayerIndex(playerIndex);\n        }\n    }\n\n    updateStack(\"stack1\", game.getCurrentHand());\n    updateStack(\"stack2\", game.getPreviousHand());\n\n    const playableCards = game.playableCards();\n    for (let i = 0; i < 8; ++i) {\n        const playButton = document.getElementById(`player1_card${i}_play`) as HTMLButtonElement;\n        const card = document.getElementById(`player1_card${i}_image`) as HTMLImageElement;\n\n        const opacity = game.currentGameRules() !== undefined && playableCards[i] === undefined ? 0.5 : 1.0;\n        playButton.disabled = playableCards[i] === undefined;\n        card.setAttribute(\"style\", `opacity: ${opacity};`);\n    }\n}\n\nfunction printWinner() {\n\n    if (game.getCurrentHand()!.cards.length === 0)\n        log(`Player ${game.getPreviousHand()!.winner} won current hand`);\n\n    const winner = game.getWinner();\n    if (winner !== undefined) {\n        const points = game.gamePlayerPoints();\n        if (winner === Winner.Players)\n            log(`Player won game with ${points} points`);\n        else\n            log(`Player lost game with ${points} points`);\n    }\n}\n\nfunction aiPlay() {\n    while (game.getCurrentPlayer().position != PlayerNumber.First) {\n        const player = game.getCurrentPlayer();\n        if (player.cardsLeft() === 0)\n            break;\n\n        const cardIdx = (player as AiPlayer).playCard(game.currentGameRules()!, game.getCurrentHand()!);\n        log(`Player ${player.position} plays ${player.cards[cardIdx]!.description()}`);\n\n        game.playCard(cardIdx);\n        printWinner();\n    }\n    updateCards();\n}\n\nfunction startGame() {\n    const gameColor = gameColorSelect.selectedIndex as GameColor;\n    const gameType = gameTypeSelect.selectedIndex as GameType;\n\n    game.setGameType(gameType, gameColor, players[0]);\n    players[0].sortCards(((c1, c2) => game.currentGameRules()!.compare(c1, c2)));\n\n    if (game.getCurrentPlayer().position !== PlayerNumber.First)\n        aiPlay();\n}\n\nfunction playCard(cardIdx: number) {\n    const card = players[0].cards[cardIdx];\n    if (card === undefined)\n        throw new Error(\"Invalid card\");\n\n    log(`Player 0 plays ${card.description()}`);\n\n    game.playCard(cardIdx);\n    updateCards();\n    printWinner();\n\n    aiPlay();\n}\n\nfunction initializeHtml() {\n\n    function clearElement(element: HTMLElement) {\n        while (element.firstChild)\n            element.removeChild(element.firstChild);\n    }\n\n    const shuffleButton = document.getElementById(\"shuffle\") as HTMLButtonElement;\n    shuffleButton.onclick = () => {\n        shuffle();\n        updateCards();\n    }\n    shuffleButton.innerText = _(\"Shuffle\");\n\n    const gameButton = document.getElementById(\"play\") as HTMLButtonElement;\n    gameButton.onclick = () => {\n        startGame();\n        updateCards();\n    }\n    gameButton.innerText = _(\"Play\");\n\n    document.getElementById(\"select_game\")!.innerText = _(\"Game\");\n    document.getElementById(\"cards_heading\")!.innerText = _(\"Cards\");\n    document.getElementById(\"stacks_heading\")!.innerText = _(\"Stacks\");\n    document.getElementById(\"current_hand\")!.innerText = _(\"Current Hand\");\n    document.getElementById(\"previous_hand\")!.innerText = _(\"Previous Hand\");\n\n    clearElement(gameTypeSelect);\n\n    for (let i = 0; i < 4; ++i) {\n        const option = document.createElement(\"option\");\n        option.innerText = _(GameType[i]);\n        gameTypeSelect.appendChild(option);\n    }\n\n    clearElement(gameColorSelect);\n\n    for (let i = 0; i < 5; ++i) {\n        const option = document.createElement(\"option\");\n        option.innerText = _(GameColor[i]);\n        gameColorSelect.appendChild(option);\n    }\n\n    const cardsRow = document.getElementById(\"player1\") as HTMLTableRowElement;\n    clearElement(cardsRow);\n    for (let i = 0; i < 8; ++i) {\n        const tableData = document.createElement(\"td\");\n        tableData.id = `player1_card${i}`;\n        const cardImage = document.createElement(\"img\");\n        cardImage.id = `player1_card${i}_image`;\n        const cardLabel = document.createElement(\"div\");\n        cardLabel.id = `player1_card${i}_label`;\n        const playButton = document.createElement(\"button\");\n        playButton.id = `player1_card${i}_play`;\n        playButton.innerText = \"play\";\n        playButton.disabled = true;\n        playButton.onclick = () => playCard(i);\n        playButton.innerText = _(\"Play\");\n        tableData.appendChild(cardImage);\n        tableData.appendChild(cardLabel);\n        tableData.appendChild(playButton);\n\n        cardsRow.appendChild(tableData);\n    }\n\n    function initStack(id: string) {\n        const tableRow = document.getElementById(id) as HTMLTableRowElement;\n        clearElement(tableRow);\n        for (let i = 0; i < 4; ++i) {\n            const tableData = document.createElement(\"td\");\n            const cardImage = document.createElement(\"img\");\n            cardImage.id = `${id}_${i}_image`;\n            const cardLabel = document.createElement(\"div\");\n            cardLabel.id = `${id}_${i}_label`;\n            tableData.appendChild(cardImage);\n            tableData.appendChild(cardLabel);\n            tableRow.appendChild(tableData);\n        }\n    }\n\n    initStack(\"stack1\");\n    initStack(\"stack2\");\n}\n\ninitializeHtml();\nshuffle();\nupdateCards();\n"]}